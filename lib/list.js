// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.List = (function(_super) {

  __extends(List, _super);

  function List(options, livelist) {
    this.renderIndex = __bind(this.renderIndex, this);

    this.removeFetchingIndication = __bind(this.removeFetchingIndication, this);

    this.displayFetchingIndication = __bind(this.displayFetchingIndication, this);

    var _this = this;
    this.fetchRequest = null;
    this.livelist = livelist;
    this.listTemplate = "{{#" + this.livelist.resourceName + "}}{{>" + this.livelist.resourceNameSingular + "}}{{/" + this.livelist.resourceName + "}}";
    this.listItemTemplate = '<li>{{id}}</li>';
    this.fetchingIndicationClass = 'updating';
    this.renderTo = "ul#" + this.livelist.resourceName;
    this.setOptions(options);
    $(this.renderTo).bind(this.livelist.eventName, function(event, params) {
      return _this.fetch({
        presets: null,
        page: params != null ? params.page : void 0
      });
    });
    this.fetch({
      presets: this.livelist.filters.getPresets()
    });
  }

  List.prototype.displayFetchingIndication = function() {
    return $(this.renderTo).addClass(this.fetchingIndicationClass);
  };

  List.prototype.removeFetchingIndication = function() {
    return $(this.renderTo).removeClass(this.fetchingIndicationClass);
  };

  List.prototype.renderIndex = function(data, textStatus, jqXHR) {
    this.livelist.data = data;
    this.render();
    this.livelist.pagination.render(this.livelist.data);
    return this.livelist.filters.render(this.livelist.data);
  };

  List.prototype.fetch = function(options) {
    var params, searchTerm;
    if (this.fetchRequest) {
      this.fetchRequest.abort();
    }
    searchTerm = this.livelist.search.searchTerm();
    params = {};
    params.filters = this.livelist.filters.setPresets(options.presets);
    if (searchTerm) {
      params.q = searchTerm;
    }
    if (options.page) {
      params.page = options.page;
    }
    return this.fetchRequest = $.ajax({
      url: this.livelist.urlPrefix,
      type: this.livelist.httpMethod,
      dataType: 'json',
      data: params,
      beforeSend: this.displayFetchingIndication,
      success: this.renderIndex
    });
  };

  List.prototype.render = function() {
    var listHTML, partials;
    partials = {};
    partials[this.livelist.resourceNameSingular] = this.listItemTemplate;
    listHTML = Mustache.to_html(this.listTemplate, this.livelist.data, partials);
    $(this.renderTo).html(listHTML);
    return this.removeFetchingIndication();
  };

  return List;

})(Utilities);
