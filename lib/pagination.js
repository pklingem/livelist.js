// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.Pagination = (function(_super) {

  __extends(Pagination, _super);

  function Pagination(options, livelist) {
    this.handlePaginationLinkClick = __bind(this.handlePaginationLinkClick, this);
    this.livelist = livelist;
    this.pagination = null;
    this.maxPages = 30;
    this.emptyListMessage = "<p>No " + this.livelist.resourceName + " matched your filter criteria</p>";
    this.setOptions(options);
    $("" + this.renderTo + " a").live('click', function(event) {
      return event.preventDefault();
    });
    $("" + this.renderTo + " li:not(.disabled) a").live('click', this.handlePaginationLinkClick);
  }

  Pagination.prototype.template = '{{#isEmpty}}\n  {{{emptyListMessage}}}\n{{/isEmpty}}\n{{^isEmpty}}\n<div class="pagination">\n  <ul>\n    <li class="{{^previousPage}}disabled{{/previousPage}}">\n      <a href=\'{{urlPrefix}}?page={{previousPage}}\' data-page=\'{{previousPage}}\'>← Previous</a>\n    </li>\n\n    {{#pages}}\n      <li class="{{#currentPage}}active disabled{{/currentPage}}">\n        <a href=\'{{urlPrefix}}?page={{page}}\' data-page=\'{{page}}\'>{{page}}</a>\n      </li>\n    {{/pages}}\n\n    <li class="{{^nextPage}}disabled{{/nextPage}}">\n      <a href=\'{{urlPrefix}}?page={{nextPage}}\' data-page=\'{{nextPage}}\'>Next →</a>\n    </li>\n  </ul>\n</div>\n{{/isEmpty}}';

  Pagination.prototype.pagesJSON = function(currentPage, totalPages) {
    var firstPage, groupSize, lastPage, previousPage, _i, _results;
    groupSize = Math.floor(this.maxPages / 2);
    firstPage = currentPage <= groupSize ? 1 : currentPage - groupSize;
    previousPage = firstPage + groupSize * 2 - 1;
    lastPage = previousPage >= totalPages ? totalPages : previousPage;
    return _.map((function() {
      _results = [];
      for (var _i = firstPage; firstPage <= lastPage ? _i <= lastPage : _i >= lastPage; firstPage <= lastPage ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this), function(page) {
      return {
        page: page,
        currentPage: currentPage === page
      };
    });
  };

  Pagination.prototype.paginationJSON = function(pagination) {
    return {
      isEmpty: pagination.total_pages === 0,
      emptyListMessage: this.emptyListMessage,
      currentPage: pagination.current_page,
      nextPage: pagination.next_page,
      previousPage: pagination.previous_page,
      urlPrefix: this.livelist.urlPrefix,
      pages: this.pagesJSON(pagination.current_page, pagination.total_pages)
    };
  };

  Pagination.prototype.render = function(data) {
    var paginationHTML;
    this.pagination = this.paginationJSON(data.pagination);
    paginationHTML = Mustache.to_html(this.template, this.pagination);
    return $(this.renderTo).html(paginationHTML);
  };

  Pagination.prototype.handlePaginationLinkClick = function(event) {
    event.preventDefault();
    return $(this.livelist.listSelector).trigger(this.livelist.eventName, {
      page: $(event.target).data('page')
    });
  };

  return Pagination;

})(Utilities);
